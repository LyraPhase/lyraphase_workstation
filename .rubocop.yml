# File:: .rubocop.yml
# Author:: James Cuzella
#
# Copyright:: 2020,  James Cuzella
# License:: GPLv3.0
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# RuboCop will start looking for the configuration file in the directory
# where the inspected file is and continue its way up to the root directory.
#
# See https://github.com/rubocop-hq/rubocop/blob/master/manual/configuration.md
AllCops:
  DisplayCopNames: true
  TargetRubyVersion: 2.6
  Include:
    - Cheffile
    - Gemfile
    - Rakefile
    - attributes/*
    - libraries/*
    - recipes/*
  Exclude:
   - templates/**/*
   - cookbooks/**/*
   - tmp/**/*

Style/Encoding:
  Enabled: false

Style/AsciiComments:
  AllowedChars:
   - Â©
   - ðŸ„¯

# Don't use Perl-ish / Ruby-ish Conventions that make things less readable & understandable
Style/SymbolArray:
  EnforcedStyle: brackets

Style/WordArray:
  EnforcedStyle: brackets

Style/RegexpLiteral:
  Enabled: false

Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: no_comma

# Commonly used screens these days easily fit more than 80 characters.
Layout/LineLength:
  Max: 120

Metrics/BlockLength:
  Exclude:
    - 'spec/*.rb'
    - 'spec/**/*.rb'
    - 'spec/**/**/*.rb'
    - 'test/*.rb'
    - 'test/**/*.rb'
    - 'test/**/**/*.rb'
    - 'test/**/**/**/*.rb'


# Too short methods lead to extraction of single-use methods, which can make
# the code easier to read (by naming things), but can also clutter the class
Metrics/MethodLength:
  Max: 20

# The guiding principle of classes is SRP, SRP can't be accurately measured by LoC
Metrics/ClassLength:
  Max: 1500
Metrics/ModuleLength:
  Max: 1500

# Raise AbcSize from 15 to 20
Metrics/AbcSize:
  Max: 20

# No space makes the method definition shorter and differentiates
# from a regular assignment.
Layout/SpaceAroundEqualsInParameterDefault:
  EnforcedStyle: no_space

# Most readable form.
Layout/HashAlignment:
  EnforcedHashRocketStyle: table
  EnforcedColonStyle: table


# Keep blank lines around attribute accessors.
Layout/EmptyLinesAroundAttributeAccessor:
  Enabled: true

# Checks method call operators to not have spaces around them.
Layout/SpaceAroundMethodCallOperator:
  Enabled: true

# When using exponential notation, favor a mantissa between 1 (inclusive) and 10 (exclusive).
Style/ExponentialNotation:
  Enabled: true

# Mixing the styles looks just silly.
Style/HashSyntax:
 EnforcedStyle: ruby19_no_mixed_keys

Style/HashEachMethods:
  Enabled: true

Style/HashTransformKeys:
  Enabled: true

Style/HashTransformValues:
  Enabled: true

Style/NumericPredicate:
  Enabled: true
  EnforcedStyle: comparison
# Use `fetch(key, value)` instead of `fetch(key) { value }`
# when value has Numeric, Rational, Complex, Symbol or String type, `false`, `true`, `nil` or is a constant.
Style/RedundantFetchBlock:
  Enabled: true

# Checks for unnecessary single-element Regexp character classes. 
Style/RedundantRegexpCharacterClass:
  Enabled: true

# Checks for redundant escapes in Regexps.
Style/RedundantRegexpEscape:
  Enabled: true

# Checks array slicing is done with endless ranges when suitable.
Style/SlicingWithRange:
  Enabled: true

# has_key? and has_value? are far more readable than key? and value?
Style/PreferredHashMethods:
  Enabled: false

# This linter is broken:
# https://github.com/AtomLinter/linter-rubocop/issues/2
Naming/FileName:
  Enabled: false

# String#% is by far the least verbose and only object oriented variant.
Style/FormatString:
  EnforcedStyle: percent

Style/CollectionMethods:
  Enabled: true
  PreferredMethods:
    # inject seems more common in the community.
    reduce: "inject"

# Either allow this style or don't. Marking it as safe with parenthesis
# is silly. Let's try to live without them for now.
Style/ParenthesesAroundCondition:
  AllowSafeAssignment: false
Lint/AssignmentInCondition:
  AllowSafeAssignment: false

# A specialized exception class will take one or more arguments and construct the message from it.
# So both variants make sense.
Style/RaiseArgs:
  Enabled: false

# Indenting the chained dots beneath each other is not supported by this cop,
# see https://github.com/bbatsov/rubocop/issues/1633
Layout/MultilineOperationIndentation:
  Enabled: false

# Fail is an alias of raise. Avoid aliases, it's more cognitive load for no gain.
# The argument that fail should be used to abort the program is wrong too,
# there's Kernel#abort for that.
Style/SignalException:
  EnforcedStyle: only_raise

# Suppressing exceptions can be perfectly fine, and be it to avoid to
# explicitly type nil into the rescue since that's what you want to return,
# or suppressing LoadError for optional dependencies
Lint/SuppressedException:
  Enabled: false

Layout/SpaceInsideBlockBraces:
  # The space here provides no real gain in readability while consuming
  # horizontal space that could be used for a better parameter name.
  # Also {| differentiates better from a hash than { | does.
  SpaceBeforeBlockParameters: true

# No trailing space differentiates better from the block:
# foo} means hash, foo } means block.
Layout/SpaceInsideHashLiteralBraces:
  EnforcedStyle: no_space

# { ... } for multi-line blocks is okay, follow Weirichs rule instead:
# https://web.archive.org/web/20140221124509/http://onestepback.org/index.cgi/Tech/Ruby/BraceVsDoEnd.rdoc
Style/BlockDelimiters:
  Enabled: false

# Enforcing -> would be nice, but not at the cost of enforcing lambda { } for
# multiline lambdas.
Style/Lambda:
  Enabled: false

# do / end blocks should be used for side effects,
# methods that run a block for side effects and have
# a useful return value are rare, assign the return
# value to a local variable for those cases.
Style/MethodCalledOnDoEndBlock:
  Enabled: true
  Exclude:
   - 'spec/*.rb'
   - 'spec/**/*.rb'
   - 'spec/**/**/*.rb'

# Enforcing the names of variables? To single letter ones? Just no.
Style/SingleLineBlockParams:
  Enabled: false

# Shadowing outer local variables with block parameters is often useful
# to not reinvent a new name for the same thing, it highlights the relation
# between the outer variable and the parameter. The cases where it's actually
# confusing are rare, and usually bad for other reasons already, for example
# because the method is too long.
Lint/ShadowingOuterLocalVariable:
  Enabled: false

# Check with yard instead.
Style/Documentation:
  Enabled: false

# This is just silly. Calling the argument `other` in all cases makes no sense.
Naming/BinaryOperatorParameterName:
  Enabled: false

# There are valid cases, for example debugging Cucumber steps,
# also they'll fail CI anyway
Lint/Debugger:
  Enabled: false

# Don't use algorithm constants for `OpenSSL::Cipher` and `OpenSSL::Digest`.
Lint/DeprecatedOpenSSLConstant:
  Enabled: true

# Reset some HoundCI changes back to Rubocop defaults
Layout/DotPosition:
  EnforcedStyle: leading

# Do not mix named captures and numbered captures in a Regexp literal.
Lint/MixedRegexpCaptureTypes:
  Enabled: true

# Checks for `raise` or `fail` statements which are raising `Exception` class.
Lint/RaiseException:
  Enabled: true

# Disallow overriding the `Struct` built-in methods via `Struct.new`.
Lint/StructNewOverride:
  Enabled: true

